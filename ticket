import sys
from tabulate import tabulate
from database import init_db
import models
import auth

def show_main_menu():
    print("\n--- Bienvenido al Sistema de Tickets ---")
    print("1. Iniciar sesi√≥n")
    print("2. Registrarse")
    print("3. Salir")

def show_user_menu():
    print("\n--- Men√∫ de Usuario ---")
    print("1. Crear ticket")
    print("2. Asignar ticket")
    print("3. Cerrar ticket")
    print("4. Ver historial")
    print("5. Cerrar sesi√≥n")

def main():
    init_db()
    user_id = None

    while user_id is None:
        show_main_menu()
        choice = input("Elige una opci√≥n: ").strip()
        
        if choice == '1':
            username = input("Usuario: ")
            password = input("Contrase√±a: ")
            user_id = auth.login_user(username, password)
            if user_id:
                print("‚úÖ Sesi√≥n iniciada.")
            else:
                print("‚ùå Usuario o contrase√±a incorrectos.")
        elif choice == '2':
            username = input("Nuevo usuario: ")
            password = input("Contrase√±a: ")
            email = input("Correo electr√≥nico: ")
            auth.register_user(username, password, email)
        elif choice == '3':
            sys.exit(0)
        else:
            print("Opci√≥n inv√°lida.")

    while True:
        show_user_menu()
        choice = input("Elige una opci√≥n: ").strip()

        if choice == '1':
            title = input("T√≠tulo del ticket: ")
            desc = input("Descripci√≥n: ")
            models.create_ticket(title, desc, user_id)
            print("‚úÖ Ticket creado.")

        elif choice == '2':
            tid = input("ID del ticket a asignar: ")
            tech = input("Asignar a (usuario): ")
            models.assign_ticket(int(tid), tech)
            print("‚úÖ Ticket asignado.")

        elif choice == '3':
            tid = input("ID del ticket a cerrar: ")
            models.close_ticket(int(tid))
            print("‚úÖ Ticket cerrado.")

        elif choice == '4':
            tickets = models.list_tickets()
            headers = ["ID", "T√≠tulo", "Asignado a", "Estado", "Creado", "Cerrado"]
            rows = [
                [t["id"], t["title"], t["assigned_to"] or "-", t["status"], t["created_at"], t["closed_at"] or "-"]
                for t in tickets if t["user_id"] == user_id
            ]
            print(tabulate(rows, headers, tablefmt="grid"))

        elif choice == '5':
            print("üîí Sesi√≥n cerrada.")
            return main()

        else:
            print("Opci√≥n inv√°lida.")

if __name__ == '__main__':
    main()
‚úÖ auth.py
python
Copiar
Editar
import hashlib
import re
from database import get_connection

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def is_valid_email(email):
    return re.match(r"[^@]+@[^@]+\.[^@]+", email)

def is_strong_password(password):
    return len(password) >= 8 and re.search(r'[A-Za-z]', password) and re.search(r'\d', password)

def register_user(username, password, email):
    if not is_valid_email(email):
        print("‚ùå Correo inv√°lido.")
        return

    if not is_strong_password(password):
        print("‚ùå La contrase√±a debe tener m√≠nimo 8 caracteres, incluir letras y n√∫meros.")
        return

    conn = get_connection()
    try:
        with conn:
            conn.execute(
                "INSERT INTO users (username, password_hash, email) VALUES (?, ?, ?)",
                (username, hash_password(password), email)
            )
        print("‚úÖ Usuario registrado.")
    except:
        print("‚ö†Ô∏è El usuario o correo ya existe.")
    conn.close()

def login_user(username, password):
    conn = get_connection()
    cursor = conn.execute(
        "SELECT id FROM users WHERE username = ? AND password_hash = ?",
        (username, hash_password(password))
    )
    user = cursor.fetchone()
    conn.close()
    return user['id'] if user else None
‚úÖ database.py
python
Copiar
Editar
import sqlite3

DB_NAME = 'tickets.db'

def get_connection():
    conn = sqlite3.connect(DB_NAME)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    conn = get_connection()
    with conn:
        conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                password_hash TEXT NOT NULL,
                email TEXT UNIQUE NOT NULL
            )
        ''')
        conn.execute('''
            CREATE TABLE IF NOT EXISTS tickets (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                title TEXT NOT NULL,
                description TEXT,
                assigned_to TEXT,
                status TEXT NOT NULL,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                closed_at TEXT,
                user_id INTEGER,
                FOREIGN KEY(user_id) REFERENCES users(id)
            )
        ''')
    conn.close()
‚úÖ models.py
python
Copiar
Editar
from database import get_connection
import smtplib
from email.message import EmailMessage

SMTP_SERVER = 'smtp.gmail.com'
SMTP_PORT = 587
EMAIL_FROM = 'tucorreo@gmail.com'  # Reemplaza con tu correo
EMAIL_PASSWORD = 'clave_de_aplicacion'  # Reemplaza con tu clave de aplicaci√≥n

def send_assignment_email(username, ticket_id):
    conn = get_connection()
    user = conn.execute("SELECT email FROM users WHERE username = ?", (username,)).fetchone()
    conn.close()
    if user:
        msg = EmailMessage()
        msg['Subject'] = f'Ticket #{ticket_id} asignado'
        msg['From'] = EMAIL_FROM
        msg['To'] = user['email']
        msg.set_content(f'Se te ha asignado el ticket #{ticket_id}.\nPor favor, revisa el sistema.')

        try:
            with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
                server.starttls()
                server.login(EMAIL_FROM, EMAIL_PASSWORD)
                server.send_message(msg)
            print(f"üìß Correo enviado a {user['email']}")
        except Exception as e:
            print(f"‚ùå Error al enviar correo: {e}")

def create_ticket(title, description, user_id):
    conn = get_connection()
    with conn:
        conn.execute(
            "INSERT INTO tickets (title, description, status, user_id) VALUES (?, ?, 'OPEN', ?)",
            (title, description, user_id)
        )
    conn.close()

def assign_ticket(ticket_id, technician):
    conn = get_connection()
    with conn:
        conn.execute(
            "UPDATE tickets SET assigned_to = ?, status = 'ASSIGNED' WHERE id = ? AND status = 'OPEN'",
            (technician, ticket_id)
        )
    conn.close()
    send_assignment_email(technician, ticket_id)

def close_ticket(ticket_id):
    conn = get_connection()
    with conn:
        conn.execute(
            "UPDATE tickets SET status = 'CLOSED', closed_at = CURRENT_TIMESTAMP WHERE id = ? AND status != 'CLOSED'",
            (ticket_id,)
        )
    conn.close()

def list_tickets():
    conn = get_connection()
    tickets = conn.execute("SELECT * FROM tickets ORDER BY created_at DESC").fetchall()
    conn.close()
    return tickets
‚úÖ requirements.txt
txt
Copiar
Editar
tabulate
‚úÖ README.md
markdown
Copiar
Editar
# Sistema de Tickets en Python

Sistema de gesti√≥n de tickets de soporte con autenticaci√≥n, base de datos SQLite y notificaci√≥n por correo.

## Funciones

- Registro con validaci√≥n de correo y contrase√±a
- Inicio de sesi√≥n
- Crear, asignar y cerrar tickets
- Ver historial
- Enviar correo cuando un ticket es asignado

## Requisitos

```bash
pip install tabulate
Configuraci√≥n de correo
Activa la verificaci√≥n en dos pasos en tu cuenta Gmail

Crea una clave de aplicaci√≥n: https://myaccount.google.com/apppasswords

Sustituye en models.py:

python
Copiar
Editar
EMAIL_FROM = 'tucorreo@gmail.com'
EMAIL_PASSWORD = 'clave_generada'
Uso
bash
Copiar
Editar
python ticket_system.py


